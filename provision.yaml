- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    security_group: MySecurityGroup-ansible-demo
    region: eu-central-1
    ami_id: ami-c86c3f23
  tasks:
  - name: Ensure a security group with correct ingress/egress rules are in place
    ec2_group:
      name: "{{ security_group }}"
      description: My security group
      region: "{{ region }}"
      ansible_password: "{{ ANSIBLE_PASSWORD }}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0

  - name: Provision servers which are to be managed with Ansible
    ec2:
      key_name: my_key
      region: "{{ region }}"
      group: "{{ security_group }}"
      instance_type: t2.large
#      instance_type: t2.xlarge
      image: "{{ ami_id }}"
      wait: true
      exact_count: 1
      count_tag:
        identity: ansible-host
      instance_tags:
        identity: ansible-host
    register: ec2instances
  - name: Wait for SSH to come up
    local_action: wait_for 
      host={{ item.public_ip }} 
      port=22 
      state=started
    with_items: "{{ ec2instances.tagged_instances }}"
  - name: Add all instance public IPs to host group
    add_host:
      hostname={{ item.public_ip }}
      groups=ec2instances
    with_items: "{{ ec2instances.tagged_instances }}"
- hosts: ec2instances
  remote_user: ec2-user
  become: true
  become_method: sudo
  tasks:
  - name: Print IP addresses of regular systems
    debug:
      var=hostvars[inventory_hostname].ansible_fqdn
  - name: Generate ssh key for user
    user:
      name: ec2-user
      generate_ssh_key: yes
    register: ssh_generated_key
  - name: Add ec2-user to authorized keys
    authorized_key:
      user: ec2-user
      state: present
      key: "{{ ssh_generated_key.ssh_public_key }}"
  - name: tell the host about our servers it might want to ssh to
    shell: "ssh-keyscan {{ hostvars[inventory_hostname].ansible_fqdn }} >> /home/ec2-user/.ssh/known_hosts"
  - name: Download and Extract the Ansible install file
    unarchive:
      src: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz
      dest: /root
      remote_src: true
  - name: Set admin password
    lineinfile:
      path: /root/ansible-tower-setup-3.4.1-1/inventory
      regexp: '^admin_password='
      line: admin_password="{{ ansible_password }}"
  - name: Set db password
    lineinfile:
      path: /root/ansible-tower-setup-3.4.1-1/inventory
      regexp: '^pg_password='
      line: pg_password="{{ ansible_password }}"
  - name: Set mq password
    lineinfile:
      path: /root/ansible-tower-setup-3.4.1-1/inventory
      regexp: '^rabbitmq_password='
      line: rabbitmq_password="{{ ansible_password }}"
  - name: Install Ansible Tower
    command: sh setup.sh
    args:
      chdir: /root/ansible-tower-setup-3.4.1-1
      creates: install.log
  - include_role:
      name: ansible-demo-server

